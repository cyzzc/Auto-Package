#!/bin/sh /etc/rc.common
# Copyright (C) 2020 IrineSistiana
# shellcheck disable=SC2034

START=91
USE_PROCD=1

PROG=/usr/bin/mosdns
CONF=$(uci -q get mosdns.mosdns.configfile)
CRON_FILE=/etc/crontabs/root

inital_conf() {
	config_load "mosdns"
	config_get "enabled" "mosdns" "enabled" "0"
}

init_yaml() {
	log_level=$(uci -q get mosdns.mosdns.log_level)
	log_file=$(uci -q get mosdns.mosdns.logfile)
	listen_port=$(uci -q get mosdns.mosdns.listen_port)
	cache_size=$(uci -q get mosdns.mosdns.cache_size)
	cache_survival_time=$(uci -q get mosdns.mosdns.cache_survival_time)
	minimal_ttl_custom=$(uci -q get mosdns.mosdns.minimal_ttl)
	maximum_ttl_custom=$(uci -q get mosdns.mosdns.maximum_ttl)
	local_dns1=$(/usr/share/mosdns/dns.sh 0)
	local_dns2=$(/usr/share/mosdns/dns.sh 1)
	remote_dns1=$(uci -q get mosdns.mosdns.remote_dns1)
	remote_dns2=$(uci -q get mosdns.mosdns.remote_dns2)
	adblock=$(/usr/share/mosdns/ad_domain.sh)
	sed "s,log_level,$log_level,g;s,log_file,$log_file,g;s,listen_port,$listen_port,g;s,cache_size,$cache_size,g;s,cache_survival_time,$cache_survival_time,g;s,minimal_ttl_custom,$minimal_ttl_custom,g;s,maximum_ttl_custom,$maximum_ttl_custom,g;s,local_dns1,$local_dns1,g;s,local_dns2,$local_dns2,g;s,remote_dns1,$remote_dns1,g;s,remote_dns2,$remote_dns2,g;s,adblock,$adblock,g" /usr/share/mosdns/default.yaml > /etc/mosdns/config.yaml
}

service_triggers() {
	procd_add_reload_trigger "mosdns"
}

restore_setting() {
	sed -i "/list server/d" /etc/config/dhcp
	uci set dhcp.@dnsmasq[0].noresolv='0'
	uci del dhcp.@dnsmasq[0].cachesize
	uci commit dhcp
}

redirect_setting() {
	if [ "${CONF}" = "/etc/mosdns/config.yaml" ]; then
		sed -i "/list server/d" /etc/config/dhcp
		uci add_list dhcp.@dnsmasq[0].server="127.0.0.1#$(uci -q get mosdns.mosdns.listen_port)"
		uci set dhcp.@dnsmasq[0].rebind_protection='0'
		uci set dhcp.@dnsmasq[0].noresolv="1"
		uci set dhcp.@dnsmasq[0].cachesize='0'
		uci commit dhcp
	else
		sed -i "/list server/d" /etc/config/dhcp
		uci add_list dhcp.@dnsmasq[0].server="127.0.0.1#$(cat /etc/mosdns/config_custom.yaml | awk -F'[:" ]+' '/^\s+addr:/{for(i=1;i<=NF;i++){if($i~/^[0-9]+$/){print $i;exit}}}')"
		uci set dhcp.@dnsmasq[0].rebind_protection='0'
		uci set dhcp.@dnsmasq[0].noresolv="1"
		uci set dhcp.@dnsmasq[0].cachesize='0'
		uci commit dhcp
	fi
}

reload_others() {
	/etc/init.d/network reload
	/etc/init.d/dnsmasq reload
}

reload_service() {
	stop
	sleep 1
	start
}

setcron() {
	sed -i '/update_geodat.sh/d' $CRON_FILE 2>/dev/null
	[ "$(uci -q get mosdns.mosdns.geo_auto_update)" -eq 1 ] && echo "0 $(uci -q get mosdns.mosdns.geo_update_day_time) * * $(uci -q get mosdns.mosdns.geo_update_week_time) /usr/share/mosdns/update_geodat.sh" >>$CRON_FILE
	crontab $CRON_FILE
}

delcron() {
	sed -i '/update_geodat.sh/d' $CRON_FILE 2>/dev/null
	crontab $CRON_FILE
}

start_service() {
	inital_conf
	[ $enabled != 1 ] && return 1
	delcron
	setcron
	init_yaml
	cat /dev/null > $(/usr/share/mosdns/log_path.sh)
	procd_open_instance mosdns
	procd_set_param command $PROG start -c "$CONF"
	procd_set_param user root
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn "${respawn_threshold:-3600}" "${respawn_timeout:-5}" "${respawn_retry:-5}"
	procd_close_instance mosdns

	restore_setting
	[ "$(uci -q get mosdns.mosdns.redirect)" -eq 1 ] && redirect_setting
	reload_others
}

stop_service() {
	pgrep -f /usr/bin/mosdns | xargs kill -9 >/dev/null 2>&1
	config_load "mosdns"
	[ "$(uci -q get mosdns.mosdns.enabled)" = "0" ] && restore_setting
	reload_others
	delcron
}
